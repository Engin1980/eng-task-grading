/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HomeRouteImport } from './routes/home'
import { Route as CoursesIndexRouteImport } from './routes/courses/index'
import { Route as CoursesIdRouteImport } from './routes/courses/$id'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIdRoute = CoursesIdRouteImport.update({
  id: '/courses/$id',
  path: '/courses/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesByTo {
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses': typeof CoursesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/courses/$id': typeof CoursesIdRoute
  '/courses/': typeof CoursesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/home' | '/login' | '/register' | '/courses/$id' | '/courses'
  fileRoutesByTo: FileRoutesByTo
  to: '/home' | '/login' | '/register' | '/courses/$id' | '/courses'
  id:
    | '__root__'
    | '/home'
    | '/login'
    | '/register'
    | '/courses/$id'
    | '/courses/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  CoursesIdRoute: typeof CoursesIdRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$id': {
      id: '/courses/$id'
      path: '/courses/$id'
      fullPath: '/courses/$id'
      preLoaderRoute: typeof CoursesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  CoursesIdRoute: CoursesIdRoute,
  CoursesIndexRoute: CoursesIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
